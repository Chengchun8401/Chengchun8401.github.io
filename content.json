{"meta":{"title":"City","subtitle":"","description":"","author":"City Spring","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"AOP统一缓存管理","slug":"AOP统一缓存管理","date":"2022-02-01T10:22:54.000Z","updated":"2022-02-01T10:41:16.028Z","comments":true,"path":"2022/02/01/AOP统一缓存管理/","link":"","permalink":"http://example.com/2022/02/01/AOP%E7%BB%9F%E4%B8%80%E7%BC%93%E5%AD%98%E7%AE%A1%E7%90%86/","excerpt":"","text":"缓存注解1234567891011@Target(ElementType.METHOD)@Retention(RetentionPolicy.RUNTIME)@Documentedpublic @interface Cache &#123; long expire() default 1 * 1000 * 60; // 缓存标识 key String name() default &quot;&quot;;&#125; 缓存切面123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263@Aspect // aop切面，定义切点和通知的关系@Component@Slf4jpublic class CacheAspect &#123; @Autowired private RedisTemplate&lt;String, String&gt; redisTemplate; // 注解放在哪里，哪里就是切点 @Pointcut(&quot;@annotation(com.mszlu.blog.common.cache.Cache)&quot;) public void pt()&#123;&#125; @Around(&quot;pt()&quot;) public Object around(ProceedingJoinPoint pjp)&#123; try &#123; Signature signature = pjp.getSignature(); //类名 String className = pjp.getTarget().getClass().getSimpleName(); //调用的方法名 String methodName = signature.getName(); Class[] parameterTypes = new Class[pjp.getArgs().length]; Object[] args = pjp.getArgs(); //参数 String params = &quot;&quot;; for(int i=0; i&lt;args.length; i++) &#123; if(args[i] != null) &#123; params += JSON.toJSONString(args[i]); parameterTypes[i] = args[i].getClass(); &#125;else &#123; parameterTypes[i] = null; &#125; &#125; if (StringUtils.isNotEmpty(params)) &#123; //加密 以防出现key过长以及字符转义获取不到的情况 params = DigestUtils.md5Hex(params); &#125; Method method = pjp.getSignature().getDeclaringType().getMethod(methodName, parameterTypes); //获取Cache注解 Cache annotation = method.getAnnotation(Cache.class); //缓存过期时间 long expire = annotation.expire(); //缓存名称 String name = annotation.name(); //先从redis获取 String redisKey = name + &quot;::&quot; + className+&quot;::&quot;+methodName+&quot;::&quot;+params; String redisValue = redisTemplate.opsForValue().get(redisKey); if (StringUtils.isNotEmpty(redisValue))&#123; log.info(&quot;缓存获取======,&#123;&#125;,&#123;&#125;&quot;,className,methodName); return JSON.parseObject(redisValue, Result.class); &#125; Object proceed = pjp.proceed(); // 调用原方法 redisTemplate.opsForValue().set(redisKey,JSON.toJSONString(proceed), Duration.ofMillis(expire)); log.info(&quot;存入缓存= &#123;&#125;,&#123;&#125;&quot;,className,methodName); return proceed; &#125; catch (Throwable throwable) &#123; throwable.printStackTrace(); &#125; return Result.fail(-999,&quot;系统错误&quot;); &#125;&#125;","categories":[],"tags":[{"name":"springboot","slug":"springboot","permalink":"http://example.com/tags/springboot/"}]},{"title":"AOP日志记录","slug":"AOP日志记录","date":"2022-02-01T10:22:39.000Z","updated":"2022-02-01T10:41:14.541Z","comments":true,"path":"2022/02/01/AOP日志记录/","link":"","permalink":"http://example.com/2022/02/01/AOP%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/","excerpt":"","text":"日志注解1234567891011// TYPE 可以放在类上 METHOD 可以放在方法上@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)@Retention(RetentionPolicy.RUNTIME)@Documentedpublic @interface LogAnnotation &#123; String module() default &quot;&quot;; String operator() default &quot;&quot;;&#125; 日志切面1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950@Component@Aspect // 切面，定义切点和通知的关系@Slf4jpublic class LogAspect &#123; @Pointcut(&quot;@annotation(com.city.common.aop.LogAnnotation)&quot;) // 注解放在哪里，哪里就是切点 public void pt()&#123;&#125; @Around(&quot;pt()&quot;) public Object log(ProceedingJoinPoint joinPoint) throws Throwable &#123; long beginTime = System.currentTimeMillis(); // 原方法的执行 Object result = joinPoint.proceed(); // 记录执行时长 long time = System.currentTimeMillis() - beginTime; // 保存日志 recordLog(joinPoint, time); return result; &#125; private void recordLog(ProceedingJoinPoint joinPoint, long time)&#123; MethodSignature signature = (MethodSignature) joinPoint.getSignature(); Method method = signature.getMethod(); LogAnnotation logAnnotation = method.getAnnotation(LogAnnotation.class); log.info(&quot;=====================log start================================&quot;); log.info(&quot;module:&#123;&#125;&quot;,logAnnotation.module()); log.info(&quot;operation:&#123;&#125;&quot;,logAnnotation.operator()); //请求的方法名 String className = joinPoint.getTarget().getClass().getName(); String methodName = signature.getName(); log.info(&quot;request method:&#123;&#125;&quot;,className + &quot;.&quot; + methodName + &quot;()&quot;); //请求的参数 Object[] args = joinPoint.getArgs(); String params = JSON.toJSONString(args[0]); log.info(&quot;params:&#123;&#125;&quot;,params); //获取request 设置IP地址 HttpServletRequest request = HttpContextUtils.getHttpServletRequest(); log.info(&quot;ip:&#123;&#125;&quot;, IpUtils.getIpAddress(request)); log.info(&quot;execute time : &#123;&#125; ms&quot;,time); log.info(&quot;=====================log end================================&quot;); &#125;&#125; 工具类 IpUtils123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566package com.city.utils;import javax.servlet.http.HttpServletRequest;public class IpUtils &#123; private static final String[] HEADERS = &#123; &quot;X-Forwarded-For&quot;, &quot;Proxy-Client-IP&quot;, &quot;WL-Proxy-Client-IP&quot;, &quot;HTTP_X_FORWARDED_FOR&quot;, &quot;HTTP_X_FORWARDED&quot;, &quot;HTTP_X_CLUSTER_CLIENT_IP&quot;, &quot;HTTP_CLIENT_IP&quot;, &quot;HTTP_FORWARDED_FOR&quot;, &quot;HTTP_FORWARDED&quot;, &quot;HTTP_VIA&quot;, &quot;REMOTE_ADDR&quot;, &quot;X-Real-IP&quot; &#125;; /** * 判断ip是否为空，空返回true * @param ip * @return */ public static boolean isEmptyIp(final String ip)&#123; return (ip == null || ip.length() == 0 || ip.trim().equals(&quot;&quot;) || &quot;unknown&quot;.equalsIgnoreCase(ip)); &#125; /** * 判断ip是否不为空，不为空返回true * @param ip * @return */ public static boolean isNotEmptyIp(final String ip)&#123; return !isEmptyIp(ip); &#125; /*** * 获取客户端ip地址(可以穿透代理) * @param request HttpServletRequest * @return */ public static String getIpAddress(HttpServletRequest request) &#123; String ip = &quot;&quot;; for (String header : HEADERS) &#123; ip = request.getHeader(header); if(isNotEmptyIp(ip)) &#123; break; &#125; &#125; if(isEmptyIp(ip))&#123; ip = request.getRemoteAddr(); &#125; if(isNotEmptyIp(ip) &amp;&amp; ip.contains(&quot;,&quot;))&#123; ip = ip.split(&quot;,&quot;)[0]; &#125; if(&quot;0:0:0:0:0:0:0:1&quot;.equals(ip))&#123; ip = &quot;127.0.0.1&quot;; &#125; return ip; &#125;&#125;","categories":[],"tags":[{"name":"springboot","slug":"springboot","permalink":"http://example.com/tags/springboot/"}]},{"title":"docker快速入门","slug":"docker快速入门","date":"2022-02-01T10:21:08.000Z","updated":"2022-02-01T10:41:17.210Z","comments":true,"path":"2022/02/01/docker快速入门/","link":"","permalink":"http://example.com/2022/02/01/docker%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/","excerpt":"","text":"","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]}],"categories":[],"tags":[{"name":"springboot","slug":"springboot","permalink":"http://example.com/tags/springboot/"},{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]}